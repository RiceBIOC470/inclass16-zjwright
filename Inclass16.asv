% Inclass16
clear;
%The folder in this repository contains code implementing a Tracking
%algorithm to match cells (or anything else) between successive frames. 
% It is an implemenation of the algorithm described in this paper: 
%
% Sbalzarini IF, Koumoutsakos P (2005) Feature point tracking and trajectory analysis 
% for video imaging in cell biology. J Struct Biol 151:182?195.
%
%The main function for the code is called MatchFrames.m and it takes three
%arguments: 
% 1. A cell array of data called peaks. Each entry of peaks is data for a
% different time point. Each row in this data should be a different object
% (i.e. a cell) and the columns should be x-coordinate, y-coordinate,
% object area, tracking index, fluorescence intensities (could be multiple
% columns). The tracking index can be initialized to -1 in every row. It will
% be filled in by MatchFrames so that its value gives the row where the
% data on the same cell can be found in the next frame. 
%2. a frame number (frame). The function will fill in the 4th column of the
% array in peaks{frame-1} with the row number of the corresponding cell in
% peaks{frame} as described above.
%3. A single parameter for the matching (L). In the current implementation of the algorithm, 
% the meaning of this parameter is that objects further than L pixels apart will never be matched. 

% Continue working with the nfkb movie you worked with in hw4. 

%get movie from HW4 and save first two timepoints
%nfkb_stack_reader=bfGetReader('HW4_2pt2_mov.tif');
%ind1=nfkb_stack_reader.getIndex(0,0,1-1)+1;
%ind2=nfkb_stack_reader.getIndex(0,0,2-1)+1;
%img_chan1=bfGetPlane(nfkb_stack_reader, ind1);
%img_chan2=bfGetPlane(nfkb_stack_reader, ind2);
%imwrite(img_chan1, 'nfkb_1st_time_point.tif');
%imwrite(img_chan2, 'nfkb_2nd_time_point.tif');

% Part 1. Use the first 2 frames of the movie. Segment them any way you
% like and fill the peaks cell array as described above so that each of the two cells 
% has 6 column matrix with x,y,area,-1,chan1 intensity, chan 2 intensity
nfkb_1=imread('nfkb_1st_time_point.tif');
nfkb_2=imread('nfkb_2nd_time_point.tif');
figure(1)
imshowpair(nfkb_1, nfkb_2);
nfkb_1_mask=nfkb_1>20000;
nfkb_1_mask=imclose(nfkb_1_mask, strel('disk', 6));
nfkb_1_mask=imopen(nfkb_1_mask, strel('disk', 3));
nfkb_2_mask=nfkb_2>20000;
nfkb_2_mask=imclose(nfkb_2_mask, strel('disk', 6));
nfkb_2_mask=imopen(nfkb_2_mask, strel('disk', 3));

nfkb1_stats=regionprops(nfkb_1_mask, nfkb_1, 'Centroid', 'Area', 'MeanIntensity');
nfkb2_stats=regionprops(nfkb_2_mask, nfkb_2, 'Centroid', 'Area', 'MeanIntensity');
xy1=cat(1, nfkb1_stats.Centroid);
a1=cat(1, nfkb1_stats.Area);
mi1=cat(1,nfkb1_stats.MeanIntensity);
tmp=-1*ones(size(a1));
peaks{1}=[xy1, a1, tmp, mi1];

xy2=cat(1, nfkb2_stats.Centroid);
a2=cat(1, nfkb2_stats.Area);
mi2=cat(1,nfkb2_stats.MeanIntensity);
tmp=-1*ones(size(a2));
peaks{2}=[xy2, a2, tmp, mi2];

% Part 2. Run match frames on this peaks array. ensure that it has filled
% the entries in peaks as described above. 
peaks_matched=MatchFrames(peaks, 2, 50);
peaks_matched{1}
% Part 3. Display the image from the second frame. For each cell that was
% matched, plot its position in frame 2 with a blue square, its position in
% frame 1 with a red star, and connect these two with a green line. 
figure(2);
imshow(nfkb_2, [100 2000]); hold on;
for ii=1:size(peaks{1});
    text(peaks{1}(ii,1), peaks{1}(ii,2), int2str(ii), 'Color', 'r', 'FontSize', 18);
    nextind=peaks_matched{1}(ii,4);
    if nextind>0
        text(peaks{2}(nextind,1), peaks{2}(nextind,2), int2str(ii), 'Color', 'b', 'FontSize', 18);
    end
end
